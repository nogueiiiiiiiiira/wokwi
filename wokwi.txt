#include <WiFi.h>
#include <PubSubClient.h>

// Configurações WiFi
const char* SSID = "Wokwi-GUEST";
const char* PASSWORD = "";

// Configurações MQTT
const char* MQTT_BROKER = "broker.hivemq.com";
const int MQTT_PORT = 1883;

// Tópicos MQTT
const char* TOPICO_TEMPERATURA = "/aula_flask/temperatura";
const char* TOPICO_UMIDADE = "/aula_flask/umidade";
const char* TOPICO_LED = "/aula_flask/led";

// Pinos
const int LED_PIN = 2;  // LED interno do ESP32 (GPIO2)
const int SENSOR_TEMP_PIN = 34;  // Pino virtual para temperatura
const int SENSOR_UMIDADE_PIN = 35; // Pino virtual para umidade

// Variáveis
WiFiClient espClient;
PubSubClient mqttClient(espClient);
float temperatura = 25.0;
float umidade = 60.0;
unsigned long ultimoEnvio = 0;
const unsigned long INTERVALO_ENVIO = 5000; // 5 segundos

void setup() {
  Serial.begin(115200);
  
  // Configurar pinos
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  
  pinMode(SENSOR_TEMP_PIN, INPUT);
  pinMode(SENSOR_UMIDADE_PIN, INPUT);
  
  // Conectar WiFi
  conectarWiFi();
  
  // Configurar MQTT
  mqttClient.setServer(MQTT_BROKER, MQTT_PORT);
  mqttClient.setCallback(mqttCallback);
  
  conectarMQTT();
  
  Serial.println("✅ Sistema IoT inicializado");
  Serial.println("📡 Pronto para enviar/receber dados MQTT");
}

void loop() {
  if (!mqttClient.connected()) {
    reconectarMQTT();
  }
  mqttClient.loop();
  
  // Enviar dados dos sensores a cada intervalo
  if (millis() - ultimoEnvio >= INTERVALO_ENVIO) {
    simularSensores();
    enviarDadosSensores();
    ultimoEnvio = millis();
  }
  
  delay(100);
}

void conectarWiFi() {
  Serial.print("📶 Conectando à rede ");
  Serial.println(SSID);
  
  WiFi.begin(SSID, PASSWORD);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println();
  Serial.println("✅ WiFi conectado!");
  Serial.print("📡 IP: ");
  Serial.println(WiFi.localIP());
}

void conectarMQTT() {
  while (!mqttClient.connected()) {
    Serial.print("🔗 Conectando ao broker MQTT...");
    
    String clientId = "ESP32-Wokwi-" + String(random(0xffff), HEX);
    
    if (mqttClient.connect(clientId.c_str())) {
      Serial.println("✅ Conectado!");
      
      // Se inscrever no tópico do LED
      mqttClient.subscribe(TOPICO_LED);
      Serial.print("👂 Inscrito no tópico: ");
      Serial.println(TOPICO_LED);
      
    } else {
      Serial.print("❌ Falha. Código: ");
      Serial.print(mqttClient.state());
      Serial.println(" Tentando novamente em 5 segundos...");
      delay(5000);
    }
  }
}

void reconectarMQTT() {
  Serial.println("🔄 Reconectando ao MQTT...");
  conectarMQTT();
}

void mqttCallback(char* topic, byte* payload, unsigned int length) {
  Serial.print("📨 Mensagem recebida [");
  Serial.print(topic);
  Serial.print("]: ");
  
  String mensagem = "";
  for (int i = 0; i < length; i++) {
    mensagem += (char)payload[i];
  }
  Serial.println(mensagem);
  
  // Controlar LED baseado na mensagem
  if (String(topic) == TOPICO_LED) {
    if (mensagem == "1") {
      digitalWrite(LED_PIN, HIGH);
      Serial.println("💡 LED LIGADO");
    } else if (mensagem == "0") {
      digitalWrite(LED_PIN, LOW);
      Serial.println("💡 LED DESLIGADO");
    }
  }
}

void simularSensores() {
  // Simular variações realistas nos sensores
  temperatura = 20.0 + (random(0, 200) / 10.0); // 20.0°C a 40.0°C
  umidade = 40.0 + (random(0, 400) / 10.0);     // 40.0% a 80.0%
  
  // Pequenas variações baseadas no tempo
  temperatura += sin(millis() / 10000.0) * 2.0;
  umidade += cos(millis() / 15000.0) * 5.0;
  
  // Garantir limites realistas
  temperatura = constrain(temperatura, 15.0, 45.0);
  umidade = constrain(umidade, 30.0, 90.0);
}

void enviarDadosSensores() {
  // Enviar temperatura
  String tempStr = String(temperatura, 1);
  mqttClient.publish(TOPICO_TEMPERATURA, tempStr.c_str());
  
  // Enviar umidade
  String umidStr = String(umidade, 1);
  mqttClient.publish(TOPICO_UMIDADE, umidStr.c_str());
  
  Serial.print("📊 Dados enviados - ");
  Serial.print("Temperatura: ");
  Serial.print(tempStr);
  Serial.print("°C, Umidade: ");
  Serial.print(umidStr);
  Serial.println("%");
}